-------------------Approach 1------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    int lLL(ListNode* head){
        int len=1;
        while(head and head->next){
            len++;
            head=head->next;
        }
        return len;
    }
    
    ListNode* swapNodes(ListNode* head, int k) {
        int lengthofLL = lLL(head);
        int end = lengthofLL-k+1;
        int val1=0,val2=0,count=1;
        ListNode* temp;
        temp=head;
        while(temp){
            if(count==k){
                cout<<count<<" "<<temp->val<<endl;
                val1=temp->val;
            }
            if(count==end){
                cout<<count<<" "<<temp->val<<endl;
                val2=temp->val;
            }
            count++;
            temp=temp->next;
        }
        count=1;
        temp=head;
        while(temp){
            if(count==k){
                temp->val=val2;
            }
            if(count==end){
                temp->val=val1;
            }
            count++;
            temp=temp->next;
        }
        return head;
    }
};



-------------Approach 2------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* first=head;
        ListNode* second=head;
        for(int i=1;i<k;i++){
            fast=fast->next;
        }
        first=fast;
        while(fast->next){
            fast=fast->next;
            slow=slow->next;
        }
        second=slow;
        int temp=first->val;
        first->val=second->val;
        second->val=temp;
        return head;
    }
};
