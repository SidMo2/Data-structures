class Solution {
public:
    int longestSubstring(string s, int k) {
        map<char,int> countmap;
        for(int i=0;i<s.length();i++){
            countmap[s[i]]++;
        }
        int idx=0;
        while(idx<s.length() and countmap[s[idx]]>=k)
            idx++;
        if(idx==s.length())
            return idx;
        int left = longestSubstring(s.substr(0,idx),k);
        int right = longestSubstring(s.substr(idx+1),k);
        return max(left,right);
    }
};


/*
in the first pass I record counts of every character in a hashmap
in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.
keep doing this recursively and the maximum of the left/right part is the answer.
*/
